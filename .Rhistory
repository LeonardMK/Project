) %>%
config(mathjax = "cdn")
plot_ly(z = ~ mat_g_sparse) %>%
add_surface() %>%
layout(
scene(
xaxis = list(title = TeX("x_1")),
yaxis = list(title = TeX("x_2")),
zaxis = list(title = TeX("y"))
)
) %>%
config(mathjax = "cdn")
plot_ly(z = ~ mat_g_sparse) %>%
add_surface() %>%
layout(
scene(
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
plot_ly(z = ~ mat_g_sparse) %>%
add_surface() %>%
layout(
scene = list(
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
plot_ly(z = ~ mat_g_sparse) %>%
add_surface() %>%
layout(
scene = list(
legend = list(title = "Y")
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
plot_ly(z = ~ mat_g_sparse) %>%
add_surface() %>%
layout(
scene = list(
legend = list(title = "Y"),
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
# Using Plotly
mat_g_sparse <- matrix(df_X_viz$Sparse, nrow = 81)
plot_ly(z = ~ mat_g_sparse) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
mat_g_sine <- matrix(df_X_viz$Sine, nrow = 81)
plot_ly(z = ~ mat_g_sine) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
mat_g_poly <- matrix(df_X_viz$Polynomial, nrow = 81)
plot_ly(z = ~ mat_g_poly) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
mat_g_neural <- matrix(df_X_viz$`Neural Network`, nrow = 81)
plot_ly(z = ~ mat_g_neural) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
plot_ly(z = ~ mat_g_sparse) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1", range = c(-2, 2)),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
mat_g_sparse
nrow(df_X_viz)
sqrt(nrow(df_X_viz))
# Using Plotly
plot_3d_surface <- function(data, x, y, z, xlab = "x", ylab = "y", zlab = "z"){
x <- enquo(x)
y <- enquo(y)
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
}
# Using Plotly
plot_3d_surface <- function(data, z, xlab = "x", ylab = "y", zlab = "z"){
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
}
plot_3d_surface(df_dgps_viz, Sparse)
plot_3d_surface(df_X_viz, Sparse)
plot_3d_surface(df_X_viz, `Neural Network`)
# Using Plotly
plot_3d_surface <- function(data, x, y, z, xlab = "x", ylab = "y", zlab = "z"){
x <- enquo(x)
y <- enquo(y)
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
rownames(mat_data) <- data %>%
pull(!!x) %>%
unique()
colnames(mat_data) <- data %>%
pull(!!y) %>%
unique()
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
}
colnames(df_X_noise_viz)
plot_3d_surface(df_X_viz, X1, X2, Sparse)
# Using Plotly
plot_3d_surface <- function(data, x, y, z, xlab = "x", ylab = "y", zlab = "z"){
x <- enquo(x)
y <- enquo(y)
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
rownames(mat_data) <- data %>%
pull(!!x) %>%
unique()
colnames(mat_data) <- data %>%
pull(!!y) %>%
unique()
browser()
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1"),
yaxis = list(title = "X.2"),
zaxis = list(title = "Y")
)
)
}
plot_3d_surface(df_X_viz, X1, X2, Sparse)
mat_data
# Using Plotly
plot_3d_surface <- function(data, x, y, z, xlab = "x", ylab = "y", zlab = "z"){
x <- enquo(x)
y <- enquo(y)
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
vec_x <- data %>%
pull(!!x) %>%
unique()
vec_y <- data %>%
pull(!!y) %>%
unique()
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1", tickvals = c(min(vec_x), max(vec_x))),
yaxis = list(title = "X.2", tickvals = c(min(vec_y), max(vec_y))),
zaxis = list(title = "Y")
)
)
}
# Using Plotly
plot_3d_surface <- function(data, x, y, z, xlab = "x", ylab = "y", zlab = "z"){
x <- enquo(x)
y <- enquo(y)
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
vec_x <- data %>%
pull(!!x) %>%
unique()
vec_y <- data %>%
pull(!!y) %>%
unique()
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1", tickvals = c(min(vec_x), max(vec_x))),
yaxis = list(title = "X.2", tickvals = c(min(vec_y), max(vec_y))),
zaxis = list(title = "Y")
)
)
}
plot_3d_surface(df_X_viz, X1, X2, Sparse)
# Using Plotly
plot_3d_surface <- function(data, x, y, z, xlab = "x", ylab = "y", zlab = "z"){
x <- enquo(x)
y <- enquo(y)
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
vec_x <- data %>%
pull(!!x) %>%
unique()
vec_y <- data %>%
pull(!!y) %>%
unique()
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1", tickvals = vec_x, ticktext = vec_x),
yaxis = list(title = "X.2", tickvals = vec_y, ticktext = vec_y),
zaxis = list(title = "Y")
)
)
}
plot_3d_surface(df_X_viz, X1, X2, Sparse)
# Using Plotly
plot_3d_surface <- function(data, x, y, z, xlab = "x", ylab = "y", zlab = "z"){
x <- enquo(x)
y <- enquo(y)
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
vec_x <- data %>%
pull(!!x) %>%
unique()
vec_y <- data %>%
pull(!!y) %>%
unique()
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1", ticktext = vec_x),
yaxis = list(title = "X.2", ticktext = vec_y),
zaxis = list(title = "Y")
)
)
}
plot_3d_surface(df_X_viz, X1, X2, Sparse)
# Using Plotly
plot_3d_surface <- function(data, x, y, z, xlab = "x", ylab = "y", zlab = "z"){
x <- enquo(x)
y <- enquo(y)
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
vec_x <- data %>%
pull(!!x) %>%
unique()
vec_y <- data %>%
pull(!!y) %>%
unique()
browser()
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1", tickvals = ticktext = vec_x),
yaxis = list(title = "X.2", ticktext = vec_y),
zaxis = list(title = "Y")
)
)
}
# Using Plotly
plot_3d_surface <- function(data, x, y, z, xlab = "x", ylab = "y", zlab = "z"){
x <- enquo(x)
y <- enquo(y)
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
vec_x <- data %>%
pull(!!x) %>%
unique()
vec_y <- data %>%
pull(!!y) %>%
unique()
browser()
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(title = "X.1", tickvals = NULL, ticktext = vec_x),
yaxis = list(title = "X.2", ticktext = vec_y),
zaxis = list(title = "Y")
)
)
}
plot_3d_surface(df_X_viz, X1, X2, Sparse)
vec_y
length(vec_y)
vec_y %>% length() %>% floor()
vec_y %>% length() %>% divide_by(10)
vec_y %>% length() %>% divide_by(10) %>% floor()
# Set x and y axis labels manually
int_n_ticks_x <- vec_x %>% length() %>% divide_by(10) %>% floor()
int_n_ticks_y <- vec_y %>% length() %>% divide_by(10) %>% floor()
# Set x and y axis labels manually
int_length_x <- length(vec_x)
int_length_y <- length(vec_y)
vec_tickvals_x <- seq(0, 10 * int_n_ticks_x, 10)
vec_tickvals_y <- seq(0, 10 * int_n_ticks_y, 10)
vec_x
vec_x[vec_tickvals_x]
vec_tickvals_x
vec_x[vec_tickvals_x + 1]
vec_ticktext_x <- vec_x[vec_tickvals_x + 1]
vec_ticktext_y <- vec_y[vec_tickvals_y + 1]
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(
title = "X.1",
tickvals = vec_tickvals_x,
ticktext = vec_ticktext_x
),
yaxis = list(
title = "X.2",
tickvals = vec_tickvals_y
ticktext = vec_ticktext_y
),
zaxis = list(title = "Y")
)
)
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(
title = "X.1",
tickvals = vec_tickvals_x,
ticktext = vec_ticktext_x
),
yaxis = list(
title = "X.2",
tickvals = vec_tickvals_y,
ticktext = vec_ticktext_y
),
zaxis = list(title = "Y")
)
)
# Using Plotly
plot_3d_surface <- function(data, x, y, z, xlab = "x", ylab = "y", zlab = "z"){
x <- enquo(x)
y <- enquo(y)
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
vec_x <- data %>%
pull(!!x) %>%
unique()
vec_y <- data %>%
pull(!!y) %>%
unique()
# Set x and y axis labels manually
int_n_ticks_x <- vec_x %>% length() %>% divide_by(10) %>% floor()
int_n_ticks_y <- vec_y %>% length() %>% divide_by(10) %>% floor()
vec_tickvals_x <- seq(0, 10 * int_n_ticks_x, 10)
vec_tickvals_y <- seq(0, 10 * int_n_ticks_y, 10)
vec_ticktext_x <- vec_x[vec_tickvals_x + 1]
vec_ticktext_y <- vec_y[vec_tickvals_y + 1]
browser()
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(
title = "X.1",
tickvals = vec_tickvals_x,
ticktext = vec_ticktext_x
),
yaxis = list(
title = "X.2",
tickvals = vec_tickvals_y,
ticktext = vec_ticktext_y
),
zaxis = list(title = "Y")
)
)
}
plot_3d_surface(df_X_viz, Sine)
plot_3d_surface(df_X_viz, X1, X2, Sparse)
# Using Plotly
plot_3d_surface <- function(data, x, y, z, xlab = "x", ylab = "y", zlab = "z"){
x <- enquo(x)
y <- enquo(y)
z <- enquo(z)
# Get grid size
int_grid_size <- data %>% nrow() %>% sqrt()
mat_data <- matrix(data %>% pull(!!z), nrow = int_grid_size)
vec_x <- data %>%
pull(!!x) %>%
unique()
vec_y <- data %>%
pull(!!y) %>%
unique()
# Set x and y axis labels manually
int_n_ticks_x <- vec_x %>% length() %>% divide_by(10) %>% floor()
int_n_ticks_y <- vec_y %>% length() %>% divide_by(10) %>% floor()
vec_tickvals_x <- seq(0, 10 * int_n_ticks_x, 10)
vec_tickvals_y <- seq(0, 10 * int_n_ticks_y, 10)
vec_ticktext_x <- vec_x[vec_tickvals_x + 1]
vec_ticktext_y <- vec_y[vec_tickvals_y + 1]
plot_ly(z = ~ mat_data) %>%
add_surface(showscale = FALSE) %>%
layout(
legend = list(title = "Y"),
scene = list(
xaxis = list(
title = "X.1",
tickvals = vec_tickvals_x,
ticktext = vec_ticktext_x
),
yaxis = list(
title = "X.2",
tickvals = vec_tickvals_y,
ticktext = vec_ticktext_y
),
zaxis = list(title = "Y")
)
)
}
plot_3d_surface(df_X_viz, X1, X2, Sparse)
plot_3d_surface(df_X_viz, X1, X2, Sine)
plot_3d_surface(df_X_viz, X1, X2, Sparse) %>%
orca("Results/Plots/DGP/3D Sparse.png", scale = 1.5)
plot_3d_surface(df_X_viz, X1, X2, Sparse) %>%
orca("Results/Plots/DGP/3D Sparse.png")
plot_3d_surface(df_X_viz, X1, X2, Sparse) %>%
orca("Results/Plots/DGP/3D Sparse.png")
plot_3d_surface(df_X_viz, X1, X2, Sparse)
plot_3d_surface(df_X_viz, X1, X2, Sine)
plot_3d_surface(df_X_viz, X1, X2, Polynomial)
plot_3d_surface(df_X_viz, X1, X2, `Neural Network`)
plot_3d_surface(df_X_noise_viz, X1, X2, Sparse)
plot_3d_surface(df_X_noise_viz, X1, X2, Sine)
plot_3d_surface(df_X_noise_viz, X1, X2, Polynomial)
plot_3d_surface(df_X_noise_viz, X1, X2, `Neural Network`)
