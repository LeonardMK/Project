vec_cases <- c("Only Cross-Fitting", "Only Orthogonal", "DML")
load("Results/Data/Final MCS Data/mcs_neural_non_cf.RData")
load("Results/Data/Final MCS Data/mcs_neural_non_orth.RData")
load("Results/Data/Final MCS Data/mcs_neural_dml.RData")
df_nuis_neural_non_orth <- desc_nuis(mcs_neural_non_orth$Measures) %>%
arrange(Fun) %>%
select(-Mle, -Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
)
)
# Eta estimator doesn't overfit and is unbiased
df_nuis_neural_non_orth %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_orth_eta.tex")
# Look at Theta parameter directly
list_rate_neural_non_orth <- mcs_neural_non_orth %>%
pluck("Estimates") %>%
mse() %>%
estimate_rate(FALSE, FALSE, TRUE)
df_rate_neural_non_orth <- list_rate_neural_non_orth$rate %>%
select(-parameter_names)
df_rate_neural_non_orth %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_orth_theta.tex")
df_rate_desc_neural_non_orth <- list_rate_neural_non_orth$rate_desc
df_rate_desc_neural_non_orth %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_orth_rate_theta.tex")
df_nuis_neural_non_cf <- desc_nuis(mcs_neural_non_cf$Measures) %>%
arrange(Fun) %>%
select(-Mle, -Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
)
)
# Eta estimator doesn't overfit and is unbiased
df_nuis_neural_non_cf %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_cf_eta.tex")
# Look at Theta parameter directly
list_rate_neural_non_cf <- mcs_neural_non_cf %>%
pluck("Estimates") %>%
mse() %>%
estimate_rate(FALSE, FALSE, TRUE)
df_rate_neural_non_cf <- list_rate_neural_non_cf$rate %>%
select(-parameter_names)
df_rate_neural_non_cf %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_cf_theta.tex")
df_rate_desc_neural_non_cf <- list_rate_neural_non_cf$rate_desc
df_rate_desc_neural_non_cf %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_cf_rate_theta.tex")
df_nuis_neural_dml <- desc_nuis(mcs_neural_dml$Measures) %>%
arrange(Fun) %>%
select(-Mle, -Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
)
)
# Eta estimator doesn't overfit and is unbiased
df_nuis_neural_dml %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/dml_eta.tex")
# Look at Theta parameter directly
list_rate_neural_dml <- mcs_neural_dml %>%
pluck("Estimates") %>%
mse() %>%
estimate_rate(FALSE, FALSE, TRUE)
df_rate_neural_dml <- list_rate_neural_dml$rate %>%
select(-parameter_names)
df_rate_neural_dml %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/dml_theta.tex")
df_rate_desc_neural_dml <- list_rate_neural_dml$rate_desc
df_rate_desc_neural_dml %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/dml_rate_theta.tex")
# Plot for Nuisance MSE between cases.
df_nuis_neural <- rbind.data.frame(
df_nuis_neural_non_orth,
df_nuis_neural_non_cf,
df_nuis_neural_dml
)
df_nuis_neural$Case = rep(vec_cases, each = 2 * int_N_unique)
df_nuis_neural %>%
ggplot(aes(x = N, col = Case)) +
geom_point(aes(y = MSE, shape = Case), size = 1.5) +
geom_line(aes(y = MSE), size = 1) +
facet_grid(Fun ~ ., scales = "free") +
labs(y = "", col = "", shape = "") +
theme_bw() +
scale_shape_manual(values = c(3, 4, 15, 16))
ggsave("Results/Plots/Motivation/Neural/nuis_mse.png", width = 30, height = 15, units = "cm")
# Table showing MSRs, MSE and Bias for l_0 and m_0
df_nuis_neural_dml %>%
select(N, Fun, MSE) %>%
pivot_wider(values_from = MSE, names_from = N) %>%
column_to_rownames("Fun") %>%
set_rownames(c("$ l_0(X) $", "$ m_0(X) $")) %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE, table.placement = "!htb",
title = "Estimated MSE of $ \\hat{\\eta}_0 $ (Neural)",
label = "tab_mot_neural_nuis_mse",
out = "Results/Tables/Motivation/Neural/nuis_mse.tex",
rownames = TRUE)
df_nuis_neural_dml %>%
select(N, Fun, Bias) %>%
pivot_wider(values_from = Bias, names_from = N) %>%
column_to_rownames("Fun") %>%
set_rownames(c("$ l_0(X) $", "$ m_0(X) $")) %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE, table.placement = "!htb",
title = "Estimated Bias of $ \\hat{\\eta}_0 $ (Neural)",
label = "tab_mot_neural_nuis_bias",
out = "Results/Tables/Motivation/Neural/nuis_bias.tex",
rownames = TRUE)
rm(list = ls())
vec_files_small <- "mcs_neural_non_cf_small.RData"
vec_files_big <- "mcs_neural_non_cf_big.RData"
vec_files_unique <- "mcs_neural_non_cf"
library(DoubleML)
library(mlr3verse)
library(tidyverse)
source("Code/Monte Carlo class.R")
source("Code/Monte Carlo Methods.R")
source("Code/Utils.R")
vec_files_unique %>% walk(~ {
# browser()
# Check if present
str_small <- str_subset(vec_files_small, .x)
str_big <- str_subset(vec_files_big, .x)
df_estimates <- data.frame()
df_measures <- data.frame()
if (!is_empty(str_small)) {
str_path_small <- paste0("Results/Data/MCS Size Efficient/", str_small)
load(str_path_small)
list_small <- eval(parse(text = str_remove(str_small, "\\.RData")))
df_estimates <- df_estimates %>% rbind(list_small$Estimates)
df_measures <- df_measures %>% rbind(list_small$Measures)
}
if (!is_empty(str_big)) {
str_path_big <- paste0("Results/Data/MCS Size Efficient/", str_big)
load(str_path_big)
list_big <- eval(parse(text = str_remove(str_big, "\\.RData")))
df_estimates <- df_estimates %>% rbind(list_big$Estimates)
df_measures <- df_measures %>% rbind(list_big$Measures)
}
if (is_empty(str_small) & is_empty(str_big)) {
str_path <- paste0("Results/Data/MCS Size Efficient/", .x, ".RData")
load(str_path)
list_mcs_obj <- eval(parse(text = .x))
df_estimates <- df_estimates %>% rbind(list_mcs_obj$Estimates)
df_measures <- df_measures %>% rbind(list_mcs_obj$Measures)
}
# Remove Duplicates
df_estimates <- distinct(df_estimates)
df_measures <- distinct(df_measures)
# Turn around bias in eta_0
df_measures$bias <- - df_measures$bias
# In case tuning is applied an extra entry is needed for best and the original learner
if ("algorithms" %in% colnames(df_estimates)) {
df_estimates_best <- df_estimates %>%
filter(algorithms == "Best",
str_remove(ml_g, "^regr\\.") == str_remove(ml_m, "^classif\\.")) %>%
mutate(algorithms = paste0("G: ",
str_remove(ml_g, "^regr\\."),
" M: ",
str_remove(ml_m, "^classif\\.")))
df_estimates <- rbind(df_estimates, df_estimates_best) %>%
arrange(N, Sample, algorithms) %>%
rename("Algorithms" = "algorithms") %>%
mutate(Algorithms = case_when(
Algorithms == "Best" ~ "Best Measure",
Algorithms == "G: glmnet M: glmnet" ~ "E-Net",
Algorithms == "G: xgboost M: xgboost" ~ "SGBM",
Algorithms == "G: ranger M: ranger" ~ "RF",
Algorithms == "G: rpart M: rpart" ~ "CART",
Algorithms == "G: kknn M: kknn" ~ "K-KNN",
Algorithms == "G: nnet M: nnet" ~ "N-Net"
))
}
list_mcs_results <- list(Estimates = df_estimates, Measures = df_measures)
# Export
assign(eval(.x), list_mcs_results)
save(
list = .x,
file = paste0("Results/Data/Final MCS Data/", .x, ".RData")
)
})
rm(list = ls())
library(stargazer)
library(tidyverse)
source("Code/Monte Carlo Methods.R")
source("Code/Utils.R")
# Setup
dbl_theta <- 0.6
int_digits <- 3
dbl_scale <- 2
vec_N <- c(50, 100, 400, 1600)
int_N_unique <- length(vec_N)
vec_cases <- c("Only Cross-Fitting", "Only Orthogonal", "DML")
load("Results/Data/Final MCS Data/mcs_neural_non_cf.RData")
load("Results/Data/Final MCS Data/mcs_neural_non_orth.RData")
load("Results/Data/Final MCS Data/mcs_neural_dml.RData")
df_nuis_neural_non_orth <- desc_nuis(mcs_neural_non_orth$Measures) %>%
arrange(Fun) %>%
select(-Mle, -Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
)
)
# Eta estimator doesn't overfit and is unbiased
df_nuis_neural_non_orth %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_orth_eta.tex")
# Look at Theta parameter directly
list_rate_neural_non_orth <- mcs_neural_non_orth %>%
pluck("Estimates") %>%
mse() %>%
estimate_rate(FALSE, FALSE, TRUE)
df_rate_neural_non_orth <- list_rate_neural_non_orth$rate %>%
select(-parameter_names)
df_rate_neural_non_orth %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_orth_theta.tex")
df_rate_desc_neural_non_orth <- list_rate_neural_non_orth$rate_desc
df_rate_desc_neural_non_orth %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_orth_rate_theta.tex")
df_nuis_neural_non_cf <- desc_nuis(mcs_neural_non_cf$Measures) %>%
arrange(Fun) %>%
select(-Mle, -Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
)
)
# Eta estimator doesn't overfit and is unbiased
df_nuis_neural_non_cf %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_cf_eta.tex")
# Look at Theta parameter directly
list_rate_neural_non_cf <- mcs_neural_non_cf %>%
pluck("Estimates") %>%
mse() %>%
estimate_rate(FALSE, FALSE, TRUE)
df_rate_neural_non_cf <- list_rate_neural_non_cf$rate %>%
select(-parameter_names)
df_rate_neural_non_cf %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_cf_theta.tex")
df_rate_desc_neural_non_cf <- list_rate_neural_non_cf$rate_desc
df_rate_desc_neural_non_cf %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/non_cf_rate_theta.tex")
df_nuis_neural_dml <- desc_nuis(mcs_neural_dml$Measures) %>%
arrange(Fun) %>%
select(-Mle, -Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
)
)
# Eta estimator doesn't overfit and is unbiased
df_nuis_neural_dml %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/dml_eta.tex")
# Look at Theta parameter directly
list_rate_neural_dml <- mcs_neural_dml %>%
pluck("Estimates") %>%
mse() %>%
estimate_rate(FALSE, FALSE, TRUE)
df_rate_neural_dml <- list_rate_neural_dml$rate %>%
select(-parameter_names)
df_rate_neural_dml %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/dml_theta.tex")
df_rate_desc_neural_dml <- list_rate_neural_dml$rate_desc
df_rate_desc_neural_dml %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE, table.placement = "!htb",
out = "Results/Tables/Motivation/Neural/dml_rate_theta.tex")
# Plot for Nuisance MSE between cases.
df_nuis_neural <- rbind.data.frame(
df_nuis_neural_non_orth,
df_nuis_neural_non_cf,
df_nuis_neural_dml
)
df_nuis_neural$Case = rep(vec_cases, each = 2 * int_N_unique)
df_nuis_neural %>%
ggplot(aes(x = N, col = Case)) +
geom_point(aes(y = MSE, shape = Case), size = 1.5) +
geom_line(aes(y = MSE), size = 1) +
facet_grid(Fun ~ ., scales = "free") +
labs(y = "", col = "", shape = "") +
theme_bw() +
scale_shape_manual(values = c(3, 4, 15, 16))
ggsave("Results/Plots/Motivation/Neural/nuis_mse.png", width = 30, height = 15, units = "cm")
# Table showing MSRs, MSE and Bias for l_0 and m_0
df_nuis_neural_dml %>%
select(N, Fun, MSE) %>%
pivot_wider(values_from = MSE, names_from = N) %>%
column_to_rownames("Fun") %>%
set_rownames(c("$ l_0(X) $", "$ m_0(X) $")) %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE, table.placement = "!htb",
title = "Estimated MSE of $ \\hat{\\eta}_0 $ (Neural)",
label = "tab_mot_neural_nuis_mse",
out = "Results/Tables/Motivation/Neural/nuis_mse.tex",
rownames = TRUE)
df_nuis_neural_dml %>%
select(N, Fun, Bias) %>%
pivot_wider(values_from = Bias, names_from = N) %>%
column_to_rownames("Fun") %>%
set_rownames(c("$ l_0(X) $", "$ m_0(X) $")) %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE, table.placement = "!htb",
title = "Estimated Bias of $ \\hat{\\eta}_0 $ (Neural)",
label = "tab_mot_neural_nuis_bias",
out = "Results/Tables/Motivation/Neural/nuis_bias.tex",
rownames = TRUE)
# Plot showing MSE, Squared Bias and Variance for all cases
df_rate_neural <- rbind(
df_rate_neural_non_orth,
df_rate_neural_non_cf,
df_rate_neural_dml
)
df_rate_neural$Case <- factor(rep(vec_cases, each = int_N_unique), levels = vec_cases)
df_rate_neural %>%
pivot_longer(cols = c(MSE, `Squared Bias`, Variance),
values_to = "value",
names_to = "type") %>%
ggplot(aes(x = N, y = value, col = type, shape = type)) +
geom_point() +
geom_line() +
facet_grid( ~ Case, scales = "free") +
labs(y = "", col = "", shape = "") +
theme_bw() +
scale_shape_manual(values = c(3, 4, 16))
ggsave("Results/Plots/Motivation/Neural/mse_decomp.png", width = 30, height = 15, units = "cm")
df_rate_neural %>%
ggplot(aes(x = N, y = Rate, col = Case, shape = Case)) +
geom_point() +
geom_line() +
labs(col = "", shape = "") +
theme_bw()
ggsave("Results/Plots/Motivation/Neural/rate_mse.png", width = 30, height = 15, units = "cm")
# Table with Rates
df_rate_neural %>%
select(N, Rate, Case) %>%
filter(!is.na(Rate)) %>%
pivot_wider(values_from = Rate, names_from = N) %>%
column_to_rownames("Case") %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE, table.placement = "H",
title = "Estimated Rate (Neural Network)",
label = "tab_mot_neural_rate",
out = "Results/Tables/Motivation/Neural/rates.tex",
rownames = TRUE)
# Table with MSE by N for differing cases as columns
df_rate_neural %>%
select(N, MSE, Case) %>%
filter(!is.na(MSE)) %>%
pivot_wider(values_from = MSE, names_from = N) %>%
column_to_rownames("Case") %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE, table.placement = "H",
title = "MSE of $ \\hat{\\theta}_0 $ (Neural Network)",
label = "tab_mot_neural_mse",
out = "Results/Tables/Motivation/Neural/mse.tex",
rownames = TRUE)
# Table with Squared Bias
df_rate_neural %>%
select(N, `Squared Bias`, Case) %>%
filter(!is.na(`Squared Bias`)) %>%
pivot_wider(values_from = `Squared Bias`, names_from = N) %>%
column_to_rownames("Case") %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE, table.placement = "H",
title = "Squared Bias of $ \\hat{\\theta}_0 $ (Neural Network)",
label = "tab_mot_neural_sq_bias",
out = "Results/Tables/Motivation/Neural/sq_bias.tex",
rownames = TRUE)
# Table with  Bias
df_rate_neural %>%
select(N, `Mean Bias`, Case) %>%
filter(!is.na(`Mean Bias`)) %>%
pivot_wider(values_from = `Mean Bias`, names_from = N) %>%
column_to_rownames("Case") %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE, table.placement = "H",
title = "Mean Bias of $ \\hat{\\theta}_0 $ (Neural Network)",
label = "tab_mot_neural_bias",
out = "Results/Tables/Motivation/Neural/bias.tex",
rownames = TRUE)
# Table with Variance
df_rate_neural %>%
select(N, Variance, Case) %>%
filter(!is.na(Variance)) %>%
pivot_wider(values_from = Variance, names_from = N) %>%
column_to_rownames("Case") %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE, table.placement = "H",
title = "Variance of $ \\hat{\\theta}_0 $ (Neural Network)",
label = "tab_mot_neural_variance",
out = "Results/Tables/Motivation/Neural/variance.tex",
rownames = TRUE)
# Distribution Plot facetted by case
list_dist_neural_non_orth <- distribution(mcs_neural_non_orth$Estimates, plot = FALSE)
list_dist_neural_non_cf <- distribution(mcs_neural_non_cf$Estimates, plot = FALSE)
list_dist_neural_dml <- distribution(mcs_neural_dml$Estimates, plot = FALSE)
df_parameter_neural <- rbind(
list_dist_neural_non_orth$data,
list_dist_neural_non_cf$data,
list_dist_neural_dml$data
)
df_parameter_neural$Case <- factor(
x = rep(vec_cases, each = nrow(df_parameter_neural) / length(vec_cases)),
levels = vec_cases
)
df_normal_neural <- rbind(
list_dist_neural_non_orth$normality,
list_dist_neural_non_cf$normality,
list_dist_neural_dml$normality
)
df_normal_neural$Case <- factor(
x = rep(vec_cases, each = nrow(df_normal_neural) / length(vec_cases)),
levels = vec_cases
)
ggplot(df_parameter_neural) +
geom_histogram(aes(x = parameter_est, y = ..density..)) +
geom_line(aes(x = x, y = pdf), data = df_normal_neural) +
geom_vline(xintercept = dbl_theta, col = "red") +
facet_wrap(Case ~ N, scales = "free", strip.position = "right",
labeller = labeller(N = label_both)) +
labs(x = TeX("$\\hat{\\theta}_0$"), y = "Density") +
theme_bw()
ggsave("Results/Plots/Motivation/Neural/dist.png", width = 30, height = 15, units = "cm")
# Coverage Probabilities
list_cov_prob_neural_non_orth <- cov_prob(mcs_neural_non_orth$Estimates, plot = FALSE)
list_cov_prob_neural_non_cf <- cov_prob(mcs_neural_non_cf$Estimates, plot = FALSE)
list_cov_prob_neural_dml <- cov_prob(mcs_neural_dml$Estimates, plot = FALSE)
df_cov_prob_neural <- rbind(
list_cov_prob_neural_non_orth$data,
list_cov_prob_neural_non_cf$data,
list_cov_prob_neural_dml$data
) %>%
filter(`Type of CI` == "95% CI")
df_cov_prob_neural$Case <- factor(
x = rep(vec_cases, each = nrow(df_cov_prob_neural) / length(vec_cases)),
levels = vec_cases
)
df_cov_prob_neural %>%
ggplot(aes(x = N, y = `Cov. Prob.`, col = `Width of CI`)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = `Lower 95%`, ymax = `Upper 95%`)) +
geom_hline(aes(yintercept = as.numeric(str_remove(`Type of CI`, "% CI$"))), linetype = "dashed") +
labs(y = "Coverage Probability", x = "Sample Size", shape = "") +
theme_bw() +
scale_color_continuous(type = "viridis") +
facet_grid(Case ~ ., labeller = label_wrap_gen(width = 10), scales = "free")
ggsave("Results/Plots/Motivation/Neural/cov_prob.png", width = 30, height = 15, units = "cm")
# Table of Estiamted Rates
df_rate_dml <- rbind(
df_rate_sparse_dml,
df_rate_sine_dml,
df_rate_inter_dml,
df_rate_neural_dml
) %>%
select(N, Rate) %>%
drop_na()
