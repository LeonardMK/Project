seed = 1,
N = 1000)
# Constructor
new_dgp <- function(
formulas = list(
y ~ beta_0 + theta * d + x %*% beta + e,
d ~ m(x, gamma, u)
),
...
){
browser()
list_args <- quos(...)
list_dgp <- list(
formulas = formulas,
args = list_args,
data = list()
)
structure(list_dgp, class = "dgp")
}
new_dgp(
b0 = 1.5,
theta = 0.75,
x = MASS::mvrnorm(N, mu = rnorm(2), Sigma = diag(runif(2, 1, 4))),
b = runif(n = 2),
e = rnorm(N, mean = 0, sd = 4),
m = function(x, gamma, u) {
(1 / (exp(x %*% gamma + u) + 1)) %>%
is_greater_than(0.5) %>%
if_else("Treated", "Untreated", missing = NA)
},
seed = 1,
N = 1000)
list_args
# Validator checks the validity of the constructors arguments
validate_dgp <- function(new_dgp){
# Check that all supplied formulas are in fact formulas
if (new_dgp %>% pluck("formulas") %>% every(is_formula) %>% not() &
new_dgp %>% pluck("formulas") %>% is.null() %>% not()) {
stop(
"All elements of the `formulas` argument have to be of class formula.",
call. = FALSE
)
}
# Check that all parameters are provided before using the run simulation method.
# Not possible here, just throw a Note what is missing
if (new_dgp %>% pluck("formulas") %>% is.null()) {
print("You still need to specify formulas for your dgp")
}
if (new_dgp %>% pluck("args") %>% is.null()) {
print("You still need to provide arguments for your simulation.")
}
# Helper function to construct class
dgp <- function(formulas = NULL, args = NULL, simulation = NULL){
dgp_obj <- new_dgp(
formulas,
args
)
validate_dgp(dgp_obj)
dgp_obj
}
test <- dgp(list(
y ~ beta_0 + theta * d + x %*% beta + e,
d ~ m(x, gamma, u)
),
b0 = 1.5,
theta = 0.75,
x = MASS::mvrnorm(N, mu = rnorm(2), Sigma = diag(runif(2, 1, 4))),
b = runif(n = 2),
e = rnorm(N, mean = 0, sd = 4),
m = function(x, gamma, u) {
(1 / (exp(x %*% gamma + u) + 1)) %>%
is_greater_than(0.5) %>%
if_else("Treated", "Untreated", missing = NA)
},
seed = 1,
N = 1000)
# Helper function to construct class
dgp <- function(formulas = NULL, ...){
dgp_obj <- new_dgp(
formulas,
...
)
validate_dgp(dgp_obj)
dgp_obj
}
test <- dgp(list(
y ~ beta_0 + theta * d + x %*% beta + e,
d ~ m(x, gamma, u)
),
b0 = 1.5,
theta = 0.75,
x = MASS::mvrnorm(N, mu = rnorm(2), Sigma = diag(runif(2, 1, 4))),
b = runif(n = 2),
e = rnorm(N, mean = 0, sd = 4),
m = function(x, gamma, u) {
(1 / (exp(x %*% gamma + u) + 1)) %>%
is_greater_than(0.5) %>%
if_else("Treated", "Untreated", missing = NA)
},
seed = 1,
N = 1000)
# Constructor
new_dgp <- function(
formulas = list(
y ~ beta_0 + theta * d + x %*% beta + e,
d ~ m(x, gamma, u)
),
...
){
# browser()
list_args <- quos(...)
list_dgp <- list(
formulas = formulas,
args = list_args,
data = list()
)
structure(list_dgp, class = "dgp")
}
# Validator checks the validity of the constructors arguments
validate_dgp <- function(new_dgp){
# Check that all supplied formulas are in fact formulas
if (new_dgp %>% pluck("formulas") %>% every(is_formula) %>% not() &
new_dgp %>% pluck("formulas") %>% is.null() %>% not()) {
stop(
"All elements of the `formulas` argument have to be of class formula.",
call. = FALSE
)
}
# Check that all parameters are provided before using the run simulation method.
# Not possible here, just throw a Note what is missing
if (new_dgp %>% pluck("formulas") %>% is.null()) {
print("You still need to specify formulas for your dgp")
}
if (new_dgp %>% pluck("args") %>% is.null()) {
print("You still need to provide arguments for your simulation.")
}
# Helper function to construct class
dgp <- function(formulas = NULL, ...){
dgp_obj <- new_dgp(
formulas,
...
)
validate_dgp(dgp_obj)
dgp_obj
}
test <- dgp(list(
y ~ beta_0 + theta * d + x %*% beta + e,
d ~ m(x, gamma, u)
),
b0 = 1.5,
theta = 0.75,
x = MASS::mvrnorm(N, mu = rnorm(2), Sigma = diag(runif(2, 1, 4))),
b = runif(n = 2),
e = rnorm(N, mean = 0, sd = 4),
m = function(x, gamma, u) {
(1 / (exp(x %*% gamma + u) + 1)) %>%
is_greater_than(0.5) %>%
if_else("Treated", "Untreated", missing = NA)
},
seed = 1,
N = 1000)
test$formulas
test$args
test$args %>% map(rlang::get_expr)
test$args %>% map(rlang::get_expr) %>% print()
# Start with a print function
print.dgp <- function(dgp_obj, ...){
# browser()
str_data <- dgp_test %$%
length(data) %>%
equals(0) %>%
if_else(
true = "Simulate data first!",
false = paste0(length(data), " simulated datasets.")
)
cat(
dgp_obj %$% print(formulas),
dgp_obj %$% map(args, rlang::get_expr) %>% print(),
str_data,
sep = "\n",
labels = c("Formulas", "Arguments", "Simulation", "Data")
)
}
print(test)
N <- 1000
x <- dgp(list(
y ~ beta_0 + theta * d + x %*% beta + e,
d ~ m(x, gamma, u)
),
b0 = 1.5,
theta = 0.75,
x = MASS::mvrnorm(N, mu = rnorm(2), Sigma = diag(runif(2, 1, 4))),
b = runif(n = 2),
e = rnorm(N, mean = 0, sd = 4),
m = function(x, gamma, u) {
(1 / (exp(x %*% gamma + u) + 1)) %>%
is_greater_than(0.5) %>%
if_else("Treated", "Untreated", missing = NA)
},
seed = 1,
N = 1000)
x$args
print(x)
rm(x)
# Start with a print function
print.dgp <- function(dgp_obj, ...){
# browser()
str_data <- dgp_test %$%
length(data) %>%
equals(0) %>%
if_else(
true = "Simulate data first!",
false = paste0(length(data), " simulated datasets.")
)
browser()
cat(
dgp_obj %$% print(formulas),
dgp_obj %$% map(args, rlang::get_expr) %>% print(),
str_data,
sep = "\n",
labels = c("Formulas", "Arguments", "Simulation", "Data")
)
}
print(test)
dgp_obj$formulas
dgp_obj %$% formulas
dgp_obj %$% formulas %>% set_names(paste0("Formula", seq(1, length(formulas))))
dgp_obj %$% formulas %$% set_names(paste0("Formula", seq(1, length(formulas))))
dgp_obj %$% set_names(formulas, paste0("Formula", seq(1, length(formulas))))
dgp_obj %$% set_names(formulas, paste0("Formula ", seq(1, length(formulas))))
dgp_obj %$% set_names(formulas, seq(1, length(formulas)))
cat(
dgp_obj %$% print(formulas),
dgp_obj %$% map(args, rlang::get_expr) %>% print(),
str_data,
sep = "\n",
labels = c("Formulas", "Arguments", "Simulation", "Data")
)
cat(
dgp_obj %$% print(formulas),
dgp_obj %$% map(args, rlang::get_expr) %>% print(),
str_data,
sep = "\n",
labels = c("Formulas", "Arguments", "Simulation", "Data")
)
cat(
dgp_obj %$% print(formulas),
dgp_obj %$% map(args, rlang::get_expr) %>% print(),
str_data,
sep = "\n",
fill = TRUE
labels = c("Formulas", "Arguments", "Simulation", "Data")
)
cat(
dgp_obj %$% print(formulas),
dgp_obj %$% map(args, rlang::get_expr) %>% print(),
str_data,
sep = "\n",
fill = TRUE,
labels = c("Formulas", "Arguments", "Simulation", "Data")
)
dgp_obj %$% print(formulas)
print(
dgp_obj %$% formulas,
dgp_obj %$% map(args, rlang::get_expr),
str_data
)
print(dgp_obj %$% formulas)
print(dgp_obj %$% formulas, dgp_obj %$% args %>% map(rlang::get_expr))
print(dgp_obj %$% args %>% map(rlang::get_expr))
list_print <- list(
Formulas = dgp_obj %$% formulas,
Arguments = dgp_obj %$% map(args, rlang::get_expr),
Data = str_data
)
list_print
list_print %>% print()
# Start with a print function
print.dgp <- function(dgp_obj, ...){
# browser()
str_data <- dgp_test %$%
length(data) %>%
equals(0) %>%
if_else(
true = "Simulate data first!",
false = paste0(length(data), " simulated datasets.")
)
# browser()
list_print <- list(
Formulas = dgp_obj %$% formulas,
Arguments = dgp_obj %$% map(args, rlang::get_expr),
Data = str_data
)
print(list_print)
}
print(test)
test %>% pluck("formulas") %>% append(x ~ z + e)
test %<>% pluck("formulas") %>% append(x ~ z + e)
test$formulas
test
test <- dgp(list(
y ~ beta_0 + theta * d + x %*% beta + e,
d ~ m(x, gamma, u)
),
b0 = 1.5,
theta = 0.75,
x = MASS::mvrnorm(N, mu = rnorm(2), Sigma = diag(runif(2, 1, 4))),
b = runif(n = 2),
e = rnorm(N, mean = 0, sd = 4),
m = function(x, gamma, u) {
(1 / (exp(x %*% gamma + u) + 1)) %>%
is_greater_than(0.5) %>%
if_else("Treated", "Untreated", missing = NA)
},
seed = 1,
N = 1000)
test %$% formulas
test %$% formulas %>% append(x ~ f(z, e))
test$formulas <- test %$% formulas %>% append(x ~ f(z, e))
test$formulas
# Add Level function. Need to add formula and args.
add_level.dgp <- function(dgp_obj, formula, ...){
# Append to Formulas
dgp_obj$formulas <- dgp_obj %$% formulas %>% append(formula)
browser()
if()
# Append to Args if ... provided
}
# Append to Formulas
dgp_obj$formulas <- dgp_obj %$% formulas %>% append(formula)
# Add Level function. Need to add formula and args.
add_level.dgp <- function(dgp_obj, formula, ...){
# Append to Formulas
dgp_obj$formulas <- dgp_obj %$% formulas %>% append(formula)
browser()
# Append to Args if ... provided
}
add_level(test)
# Create Generic
add_level <- function(x){
UseMethod("dgp")
}
# Create Generic
add_level <- function(x){
UseMethod("add_level")
}
add_level(test, x ~ f(z, e))
add_level(test, formula = x ~ f(z, e))
# Add Level function. Need to add formula and args.
add_level.dgp <- function(dgp_obj, formula, ...){
browser()
# Append to Formulas
dgp_obj$formulas <- dgp_obj %$% formulas %>% append(formula)
# Append to Args if ... provided
}
# Create Generic
add_level <- function(x){
UseMethod("add_level")
}
add_level(test, formula = x ~ f(z, e))
install.packages("sloop")
library(sloop)
s3_dispatch(add_level(test))
add_level(test, formula = a ~ b)
add_level(test, formula = a ~ b, b = 10)
add_level(test)
class(test)
# Create Generic
add_level <- function(x){
UseMethod("add_level")
}
# Add Level function. Need to add formula and args.
add_level.dgp <- function(dgp_obj, formula, ...){
browser()
# Append to Formulas
dgp_obj$formulas <- dgp_obj %$% formulas %>% append(formula)
# Append to Args if ... provided
}
test %>% add_level()
# Create Generic
add_level <- function(x, ...){
UseMethod("add_level")
}
test %>% add_level(formula)
# Create Generic
add_level <- function(x, ...){
UseMethod("add_level")
}
# Add Level function. Need to add formula and args.
add_level.dgp <- function(dgp_obj, formula, ...){
browser()
# Append to Formulas
dgp_obj$formulas <- dgp_obj %$% formulas %>% append(formula)
# Append to Args if ... provided
}
test %>% add_level(formula = x ~ a + b)
...
quos(...)
quo(...)
test$formulas
# Add Level function. Need to add formula and args.
add_level.dgp <- function(dgp_obj, formula, ...){
browser()
# Append to Formulas
dgp_obj$formulas <- dgp_obj %$% formulas %>% append(formula)
# Append to Args if ... provided
dgp_obj
}
test %>% add_level(formula = x ~ a + b)
ls()
# Append to Args if ... provided
list_args <- quos(...)
is_empty(list_args)
a <- list(a = 1, b = 2, c = 3)
b <- list(a = 10, d = 5)
append(a, b)
dgp_obj$args %>% names()
test %>% add_level(formula = x ~ a + b, beta_0 = 1)
# Add Level function. Need to add formula and args.
add_level.dgp <- function(dgp_obj, formula, ...){
browser()
# Append to Formulas
dgp_obj$formulas <- dgp_obj %$% formulas %>% append(formula)
# Append to Args if ... provided
list_args <- quos(...)
if (!is_empty(list_args)) {
# Check if args are already present
vec_old <- dgp_obj %$% args %>% names()
# Get names of new args
vec_new <- names(list_args)
vec_replace <- str_extract(vec_old, vec_new)
dgp_obj$args %>% modify_at(vec_replace, ~ list_args[[.x]])
}
dgp_obj
}
test %>% add_level(formula = x ~ a + b, beta_0 = 1)
beta_0
ls()
# Add Level function. Need to add formula and args.
add_level.dgp <- function(dgp_obj, ...){
browser()
# Append to Formulas
dgp_obj$formulas <- dgp_obj %$% formulas %>% append(formula)
# Append to Args if ... provided
list_args <- quos(...)
if (!is_empty(list_args)) {
# Check if args are already present
vec_old <- dgp_obj %$% args %>% names()
# Get names of new args
vec_new <- names(list_args)
vec_replace <- str_extract(vec_old, vec_new)
dgp_obj$args %>% modify_at(vec_replace, ~ list_args[[.x]])
}
dgp_obj
}
test %>% add_level(formula = x ~ a + b, beta_0 = 1)
6 * 16
rm(list = ls())
30 * (1.5 + 1.75 + 1.5 + 1.5) + 40 * (1.5 + 1 + 1.5 + 1.5 + 1.5)
(30 * (1.5 + 1.75 + 1.5 + 1.5) + 40 * (1.5 + 1 + 1.5 + 1.5 + 1.5)) * 4
library(DoubleML)
library(mlr3verse)
library(tidyverse)
setwd("C:/Users/Wilms/OneDrive - uni-bonn.de/Uni Bonn/6. Semester/Masterarbeit/Project/")
source("Code/DGP class.R")
source("Code/Definition Parameter Space.R")
source("Code/Estimator Functions.R")
source("Code/Monte Carlo class.R")
source("Code/Monte Carlo Methods.R")
source("Code/Utils.R")
# Example dgp object
set.seed(4)
# Coefficients that are supposed to remain constant have to be set beforehand or must be provided
vec_beta <- rnorm(2, sd = 10)
vec_mu <- runif(2, min = -10, max = 10)
mat_Sigma <- diag(runif(2, min = 1, max = 10))
test <- dgp() %>%
add_level(
formulas = Y ~ beta_0 + theta * D + g(X, beta) + E,
beta_0 = 1.5,
theta = 0.6,
g = function(X, beta){
X <- as.matrix(X)
Y_X <- (
sin(X %*% beta) *
sqrt(
abs(1 / sum(rep(c(0, 1), length.out = ncol(X))))
)
as.vector(Y_X)
},
X = MASS::mvrnorm(N, mu = vec_mu, Sigma = mat_Sigma),
beta = vec_beta,
E = rnorm(N, 0, 2)
) %>%
add_level(
formulas = D ~ m(X, gamma, U),
m = function(X, gamma, U){
X <- as.matrix(X)
pi <- sigmoid::logistic(X %*% gamma + U)
d <- rbinom(nrow(X), 1, pi)
cbind(D = d, Prob_D = as.vector(pi))
},
U = rnorm(N, 0, 0.5),
gamma = c(-0.8, -1)
)
test %>% get_formulas()
test %>% get_arguments()
test <- test %>% run_simulation(N = c(100, 200, 400), seed = 2, samples = 30)
source("Data/Example MCS.RData")
mse(mcs_test, N = 100, Samples = 1:10, na.rm = TRUE, by = "algorithms")
source("Data/Example MCS.RData")
source(".RData")
