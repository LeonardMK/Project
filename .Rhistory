)
df_parameter_inter <- df_parameter_inter %>%
filter(Case != "Naive")
df_normal_inter <- rbind(
list_dist_inter_naive$normality,
list_dist_inter_non_orth$normality,
list_dist_inter_non_cf$normality,
list_dist_inter_dml$normality
)
df_normal_inter$Case <- factor(
x = rep(vec_cases, each = nrow(df_normal_inter) / length(vec_cases)),
levels = vec_cases
)
df_normal_inter <- df_normal_inter %>%
filter(Case != "Naive")
ggplot(df_parameter_inter) +
geom_histogram(aes(x = parameter_est, y = ..density..)) +
geom_line(aes(x = x, y = pdf), data = df_normal_inter) +
geom_vline(xintercept = dbl_theta, col = "red") +
facet_wrap(Case ~ N, scales = "free", strip.position = "right") +
labs(x = TeX("$\\hat{\\theta}_0$"), y = "Density") +
theme_bw()
ggsave("Results/Plots/Motivation/Inter/dist.png", scale = dbl_scale)
# Coverage Probabilities
list_cov_prob_inter_naive <- cov_prob(mcs_inter_naive$Estimates, plot = FALSE)
list_cov_prob_inter_non_orth <- cov_prob(mcs_inter_non_orth$Estimates, plot = FALSE)
list_cov_prob_inter_non_cf <- cov_prob(mcs_inter_non_cf$Estimates, plot = FALSE)
list_cov_prob_inter_dml <- cov_prob(mcs_inter_dml$Estimates, plot = FALSE)
df_cov_prob_inter <- rbind(
list_cov_prob_inter_naive$data,
list_cov_prob_inter_non_orth$data,
list_cov_prob_inter_non_cf$data,
list_cov_prob_inter_dml$data
) %>%
filter(`Type of CI` == "95% CI")
df_cov_prob_inter$Case <- factor(
x = rep(vec_cases, each = nrow(df_cov_prob_inter) / length(vec_cases)),
levels = vec_cases
)
df_normal_inter <- df_normal_inter %>%
filter(Case != "Naive")
df_cov_prob_inter %>%
ggplot(aes(x = N, y = `Cov. Prob.`, col = `Width of CI`)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = `Lower 95%`, ymax = `Upper 95%`)) +
geom_hline(aes(yintercept = as.numeric(str_remove(`Type of CI`, "% CI$"))), linetype = "dashed") +
labs(y = "Coverage Probability", x = "Sample Size", shape = "") +
theme_bw() +
scale_color_continuous(type = "viridis") +
facet_grid(Case ~ ., labeller = label_wrap_gen(width = 10), scales = "free")
ggsave("Results/Plots/Motivation/Inter/cov_prob.png", scale = dbl_scale)
# Neural --------------------------------------------------------------------
load("Results/Data/Final MCS Data/mcs_neural_naive.RData")
load("Results/Data/Final MCS Data/mcs_neural_non_cf.RData")
load("Results/Data/Final MCS Data/mcs_neural_non_orth.RData")
load("Results/Data/Final MCS Data/mcs_neural_dml.RData")
# Naive -------------------------------------------------------------------
df_nuis_neural_naive <- desc_nuis(mcs_neural_naive$Measures) %>%
arrange(Fun) %>%
select(-Mle, -Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
)
)
# Eta estimator doesn't overfit and is unbiased
df_nuis_neural_naive %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/naive_eta.tex")
# Look at Theta parameter directly
list_rate_neural_naive <- mcs_neural_naive %>%
pluck("Estimates") %>%
mse() %>%
estimate_rate(FALSE, FALSE, TRUE)
df_rate_neural_naive <- list_rate_neural_naive$rate %>%
select(-parameter_names)
df_rate_neural_naive %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/naive_theta.tex")
df_rate_desc_neural_naive <- list_rate_neural_naive$rate_desc
df_rate_desc_neural_naive %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/naive_rate_theta.tex")
# Non-Orthogonal Score ----------------------------------------------------
df_nuis_neural_non_orth <- desc_nuis(mcs_neural_non_orth$Measures) %>%
arrange(Fun) %>%
select(-Mle, -Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
)
)
# Eta estimator doesn't overfit and is unbiased
df_nuis_neural_non_orth %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/non_orth_eta.tex")
# Look at Theta parameter directly
list_rate_neural_non_orth <- mcs_neural_non_orth %>%
pluck("Estimates") %>%
mse() %>%
estimate_rate(FALSE, FALSE, TRUE)
df_rate_neural_non_orth <- list_rate_neural_non_orth$rate %>%
select(-parameter_names)
df_rate_neural_non_orth %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/non_orth_theta.tex")
df_rate_desc_neural_non_orth <- list_rate_neural_non_orth$rate_desc
df_rate_desc_neural_non_orth %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/non_orth_rate_theta.tex")
# Non Cross-Fitting -------------------------------------------------------
df_nuis_neural_non_cf <- desc_nuis(mcs_neural_non_cf$Measures) %>%
arrange(Fun) %>%
select(-Mle, -Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
)
)
# Eta estimator doesn't overfit and is unbiased
df_nuis_neural_non_cf %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/non_cf_eta.tex")
# Look at Theta parameter directly
list_rate_neural_non_cf <- mcs_neural_non_cf %>%
pluck("Estimates") %>%
mse() %>%
estimate_rate(FALSE, FALSE, TRUE)
df_rate_neural_non_cf <- list_rate_neural_non_cf$rate %>%
select(-parameter_names)
df_rate_neural_non_cf %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/non_cf_theta.tex")
df_rate_desc_neural_non_cf <- list_rate_neural_non_cf$rate_desc
df_rate_desc_neural_non_cf %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/non_cf_rate_theta.tex")
# Double Machine Learning -------------------------------------------------
df_nuis_neural_dml <- desc_nuis(mcs_neural_dml$Measures) %>%
arrange(Fun) %>%
select(-Mle, -Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
)
)
# Eta estimator doesn't overfit and is unbiased
df_nuis_neural_dml %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/dml_eta.tex")
# Look at Theta parameter directly
list_rate_neural_dml <- mcs_neural_dml %>%
pluck("Estimates") %>%
mse() %>%
estimate_rate(FALSE, FALSE, TRUE)
df_rate_neural_dml <- list_rate_neural_dml$rate %>%
select(-parameter_names)
df_rate_neural_dml %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/dml_theta.tex")
df_rate_desc_neural_dml <- list_rate_neural_dml$rate_desc
df_rate_desc_neural_dml %>%
transform_scientific(int_digits) %>%
stargazer(type = "latex", summary = FALSE,
out = "Results/Tables/Motivation/Neural/dml_rate_theta.tex")
# Joint Tables and Plots --------------------------------------------------
# Plot for Nuisance MSE between cases.
df_nuis_neural <- rbind.data.frame(
df_nuis_neural_naive,
df_nuis_neural_non_orth,
df_nuis_neural_non_cf,
df_nuis_neural_dml
)
df_nuis_neural$Case = rep(vec_cases, each = 2 * int_N_unique)
df_nuis_neural <- df_nuis_neural %>%
filter(Case != "Naive")
df_nuis_neural %>%
ggplot(aes(x = N, col = Case)) +
geom_point(aes(y = MSE, shape = Case), size = 1.5) +
geom_line(aes(y = MSE), size = 1) +
facet_grid(Fun ~ ., scales = "free") +
labs(y = "", col = "", shape = "") +
theme_bw() +
scale_shape_manual(values = c(3, 4, 15, 16))
ggsave("Results/Plots/Motivation/Neural/nuis_mse.png", scale = dbl_scale)
# Table showing MSRs, MSE and Bias for l_0 and m_0
df_nuis_neural_dml %>%
select(N, Fun, MSE) %>%
pivot_wider(values_from = MSE, names_from = N) %>%
column_to_rownames("Fun") %>%
set_rownames(c("$ l_0(X) $", "$ m_0(X) $")) %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE,
title = "Estimated MSE of $ \\hat{\\eta}_0 $ (Neural)",
label = "tab_mot_neural_nuis_mse",
out = "Results/Tables/Motivation/Neural/nuis_mse.tex",
rownames = TRUE)
df_nuis_neural_dml %>%
select(N, Fun, Bias) %>%
pivot_wider(values_from = Bias, names_from = N) %>%
column_to_rownames("Fun") %>%
set_rownames(c("$ l_0(X) $", "$ m_0(X) $")) %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE,
title = "Estimated Bias of $ \\hat{\\eta}_0 $ (Neural)",
label = "tab_mot_neural_nuis_bias",
out = "Results/Tables/Motivation/Neural/nuis_bias.tex",
rownames = TRUE)
df_nuis_neural_dml %>%
mutate(Difference = `MSR. Validation` - `MSR. Test`) %>%
select(N, Fun, Difference) %>%
pivot_wider(values_from = Difference, names_from = N) %>%
column_to_rownames("Fun") %>%
set_rownames(c("$ l_0(X) $", "$ m_0(X) $")) %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE,
title = "Difference of Validation and Test Error Measure (Neural)",
label = "tab_mot_neural_nuis_diff_msrs",
out = "Results/Tables/Motivation/Neural/nuis_diff_msrs.tex",
rownames = TRUE)
# Plot showing MSE, Squared Bias and Variance for all cases
df_rate_neural <- rbind(
df_rate_neural_naive,
df_rate_neural_non_orth,
df_rate_neural_non_cf,
df_rate_neural_dml
)
df_rate_neural$Case <- factor(rep(vec_cases, each = int_N_unique), levels = vec_cases)
df_rate_neural <- df_rate_neural %>%
filter(Case != "Naive")
df_rate_neural %>%
pivot_longer(cols = c(MSE, `Squared Bias`, Variance),
values_to = "value",
names_to = "type") %>%
ggplot(aes(x = N, y = value, col = type, shape = type)) +
geom_point() +
geom_line() +
facet_grid( ~ Case, scales = "free") +
labs(y = "", col = "", shape = "") +
theme_bw() +
scale_shape_manual(values = c(3, 4, 16))
ggsave("Results/Plots/Motivation/Neural/mse_decomp.png", scale = dbl_scale)
df_rate_neural %>%
ggplot(aes(x = N, y = Rate, col = Case, shape = Case)) +
geom_point() +
geom_line() +
labs(col = "", shape = "") +
theme_bw()
ggsave("Results/Plots/Motivation/Neural/rate_mse.png", scale = dbl_scale)
# Table with Rates
df_rate_neural %>%
select(N, Rate, Case) %>%
filter(!is.na(Rate)) %>%
pivot_wider(values_from = Rate, names_from = N) %>%
column_to_rownames("Case") %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE,
title = "Estimated Rate (Neural Network)",
label = "tab_mot_neural_rate",
out = "Results/Tables/Motivation/Neural/rates.tex",
rownames = TRUE)
# Table with MSE by N for differing cases as columns
df_rate_neural %>%
select(N, MSE, Case) %>%
filter(!is.na(MSE)) %>%
pivot_wider(values_from = MSE, names_from = N) %>%
column_to_rownames("Case") %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE,
title = "MSE of $ \\hat{\\theta}_0 $ (Neural Network)",
label = "tab_mot_neural_mse",
out = "Results/Tables/Motivation/Neural/mse.tex",
rownames = TRUE)
# Table with Squared Bias
df_rate_neural %>%
select(N, `Mean Bias`, Case) %>%
filter(!is.na(`Mean Bias`)) %>%
pivot_wider(values_from = `Mean Bias`, names_from = N) %>%
column_to_rownames("Case") %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE,
title = "Bias of $ \\hat{\\theta}_0 $ (Neural Network)",
label = "tab_mot_neural_bias",
out = "Results/Tables/Motivation/Neural/bias.tex",
rownames = TRUE)
# Table with Variance
df_rate_neural %>%
select(N, Variance, Case) %>%
filter(!is.na(Variance)) %>%
pivot_wider(values_from = Variance, names_from = N) %>%
column_to_rownames("Case") %>%
transform_scientific(int_digits) %>%
stargazer(summary = FALSE,
title = "Variance of $ \\hat{\\theta}_0 $ (Neural Network)",
label = "tab_mot_neural_variance",
out = "Results/Tables/Motivation/Neural/variance.tex",
rownames = TRUE)
# Distribution Plot facetted by case
list_dist_neural_naive <- distribution(mcs_neural_naive$Estimates, plot = FALSE)
list_dist_neural_non_orth <- distribution(mcs_neural_non_orth$Estimates, plot = FALSE)
list_dist_neural_non_cf <- distribution(mcs_neural_non_cf$Estimates, plot = FALSE)
list_dist_neural_dml <- distribution(mcs_neural_dml$Estimates, plot = FALSE)
df_parameter_neural <- rbind(
list_dist_neural_naive$data,
list_dist_neural_non_orth$data,
list_dist_neural_non_cf$data,
list_dist_neural_dml$data
)
df_parameter_neural$Case <- factor(
x = rep(vec_cases, each = nrow(df_parameter_neural) / length(vec_cases)),
levels = vec_cases
)
df_parameter_neural <- df_parameter_neural %>%
filter(Case != "Naive")
df_normal_neural <- rbind(
list_dist_neural_naive$normality,
list_dist_neural_non_orth$normality,
list_dist_neural_non_cf$normality,
list_dist_neural_dml$normality
)
df_normal_neural$Case <- factor(
x = rep(vec_cases, each = nrow(df_normal_neural) / length(vec_cases)),
levels = vec_cases
)
df_normal_neural <- df_normal_neural %>%
filter(Case != "Naive")
ggplot(df_parameter_neural) +
geom_histogram(aes(x = parameter_est, y = ..density..)) +
geom_line(aes(x = x, y = pdf), data = df_normal_neural) +
geom_vline(xintercept = dbl_theta, col = "red") +
facet_wrap(Case ~ N, scales = "free", strip.position = "right") +
labs(x = TeX("$\\hat{\\theta}_0$"), y = "Density") +
theme_bw()
ggsave("Results/Plots/Motivation/Neural/dist.png", scale = dbl_scale)
# Coverage Probabilities
list_cov_prob_neural_naive <- cov_prob(mcs_neural_naive$Estimates, plot = FALSE)
list_cov_prob_neural_non_orth <- cov_prob(mcs_neural_non_orth$Estimates, plot = FALSE)
list_cov_prob_neural_non_cf <- cov_prob(mcs_neural_non_cf$Estimates, plot = FALSE)
list_cov_prob_neural_dml <- cov_prob(mcs_neural_dml$Estimates, plot = FALSE)
df_cov_prob_neural <- rbind(
list_cov_prob_neural_naive$data,
list_cov_prob_neural_non_orth$data,
list_cov_prob_neural_non_cf$data,
list_cov_prob_neural_dml$data
) %>%
filter(`Type of CI` == "95% CI")
df_cov_prob_neural$Case <- factor(
x = rep(vec_cases, each = nrow(df_cov_prob_neural) / length(vec_cases)),
levels = vec_cases
)
df_cov_prob_neural <- df_cov_prob_neural %>%
filter(Case != "Naive")
df_cov_prob_neural %>%
ggplot(aes(x = N, y = `Cov. Prob.`, col = `Width of CI`)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = `Lower 95%`, ymax = `Upper 95%`)) +
geom_hline(aes(yintercept = as.numeric(str_remove(`Type of CI`, "% CI$"))), linetype = "dashed") +
labs(y = "Coverage Probability", x = "Sample Size", shape = "") +
theme_bw() +
scale_color_continuous(type = "viridis") +
facet_grid(Case ~ ., labeller = label_wrap_gen(width = 10), scales = "free")
ggsave("Results/Plots/Motivation/Neural/cov_prob.png", scale = dbl_scale)
# Joint Analysis of All Functions -----------------------------------------
# Table of Estiamted Rates
df_rate_dml <- rbind(
df_rate_sparse_dml,
df_rate_sine_dml,
df_rate_inter_dml,
df_rate_neural_dml
) %>%
select(N, Rate) %>%
drop_na()
df_rate_dml$`Nuisance Function` <- rep(c("Sparse", "Sine", "Interaction", "Neural Net"), each = 3)
df_rate_dml %>%
pivot_wider(names_from = N, values_from = Rate) %>%
transform_scientific(int_digits) %>%
stargazer(title = "Estimated Rates by $ N $",
label = "tab_mot_rate",
summary = FALSE,
out = "Results/Tables/Motivation/rate_conv.tex")
library(stargazer)
library(tidyverse)
source("Code/Monte Carlo Methods.R")
source("Code/Utils.R")
# Setup
dbl_theta <- 0.6
int_digits <- 3
dbl_scale <- 2
vec_N <- c(50, 100, 400)
int_N_unique <- length(vec_N)
vec_cases <- c("Untuned", "Tuned")
vec_mle <- c("E-Net", "K-KNN", "NNet", "Random F.", "CART", "SGBM")
vec_mle_fun_unique <- c("glmnet", "kknn", "nnet", "ranger", "rpart", "xgboost")
names(vec_mle) <- vec_mle_fun_unique
int_mle_unique <- length(vec_mle)
vec_mle_filter <- c("Best",
"G: E-Net\nM: E-Net",
"G: NNet\nM: NNet",
"G: K-KNN\nM: K-KNN",
"G: SGBM\nM: SGBM"
)
load("Results/Data/Final MCS Data/mcs_sine_not.RData")
load("Results/Data/Final MCS Data/mcs_sine_rcv.RData")
df_nuis_sine_not <- desc_nuis(mcs_sine_not$Measures) %>%
arrange(Fun) %>%
select(-Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
),
Mle = str_remove(Mle, "^.*\\.") %>% str_to_title()
) %>%
rename(MLE = Mle)
df_nuis_sine_not
df_nuis_sine_not %>% select(N, Fun, MLE, MSE) %>% pivot_wider(names_from = N, values_from = MSE)
load("Results/Data/Final MCS Data/mcs_inter_not.RData")
load("Results/Data/Final MCS Data/mcs_inter_rcv.RData")
df_nuis_inter_not <- desc_nuis(mcs_inter_not$Measures) %>%
arrange(Fun) %>%
select(-Variance) %>%
rename("MSR. Test" = "Mean_msr_in", "MSR. Validation" = Mean_msr_val) %>%
mutate(
Fun = case_when(
Fun == "ml_g" ~ "l(X)",
Fun == "ml_m" ~ "m(X)",
TRUE ~ NA_character_
),
Mle = str_remove(Mle, "^.*\\.") %>% str_to_title()
) %>%
rename(MLE = Mle)
df_nuis_inter_not %>% select(N, Fun, MLE, MSE) %>% pivot_wider(names_from = N, values_from = MSE)
df_nuis_sine_not %>% select(N, Fun, MLE, MSE) %>% pivot_wider(names_from = N, values_from = MSE)
df_nuis_sine_not %>% select(N, Fun, MLE, Bias) %>% pivot_wider(names_from = N, values_from = Bias)
df_nuis_inter_not %>% select(N, Fun, MLE, Bias) %>% pivot_wider(names_from = N, values_from = Bias)
df_nuis_inter_not %>% select(N, Fun, MLE, `MSR. Validation`) %>% pivot_wider(names_from = N, values_from = `MSR. Validation`)
rm(list = ls())
load("Results/Data/Final MCS Data/mcs_inter_dml.RData")
mcs_inter_dml$Estimates %>% group_by(N) %>% summarise(mean(parameter_est))
library(stargazer)
library(tidyverse)
source("Code/Monte Carlo Methods.R")
source("Code/Utils.R")
# Setup
dbl_theta <- 0.6
int_digits <- 3
dbl_scale <- 2
vec_N <- c(50, 100, 400, 1600)
int_N_unique <- length(vec_N)
vec_cases <- c("Naive", "Only Cross-Fitting", "Only Orthogonal Score", "DML")
load("Results/Data/Final MCS Data/mcs_inter_naive.RData")
load("Results/Data/Final MCS Data/mcs_inter_non_cf.RData")
load("Results/Data/Final MCS Data/mcs_inter_non_orth.RData")
load("Results/Data/Final MCS Data/mcs_inter_dml.RData")
# Coverage Probabilities
list_cov_prob_inter_naive <- cov_prob(mcs_inter_naive$Estimates, plot = FALSE)
list_cov_prob_inter_non_orth <- cov_prob(mcs_inter_non_orth$Estimates, plot = FALSE)
list_cov_prob_inter_non_cf <- cov_prob(mcs_inter_non_cf$Estimates, plot = FALSE)
list_cov_prob_inter_dml <- cov_prob(mcs_inter_dml$Estimates, plot = FALSE)
df_cov_prob_inter <- rbind(
list_cov_prob_inter_naive$data,
list_cov_prob_inter_non_orth$data,
list_cov_prob_inter_non_cf$data,
list_cov_prob_inter_dml$data
) %>%
filter(`Type of CI` == "95% CI")
df_cov_prob_inter$Case <- factor(
x = rep(vec_cases, each = nrow(df_cov_prob_inter) / length(vec_cases)),
levels = vec_cases
)
df_cov_prob_inter <- df_cov_prob_inter %>%
filter(Case != "Naive")
df_cov_prob_inter %>%
ggplot(aes(x = N, y = `Cov. Prob.`, col = `Width of CI`)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin = `Lower 95%`, ymax = `Upper 95%`)) +
geom_hline(aes(yintercept = as.numeric(str_remove(`Type of CI`, "% CI$"))), linetype = "dashed") +
labs(y = "Coverage Probability", x = "Sample Size", shape = "") +
theme_bw() +
scale_color_continuous(type = "viridis") +
facet_grid(Case ~ ., labeller = label_wrap_gen(width = 10), scales = "free")
ggsave("Results/Plots/Motivation/Inter/cov_prob.png", scale = dbl_scale)
(2.431 - 3.128) / 3.128
(2.431 - 1.599) / 1.599
(2.431 - 1.599) / 2.431
load("Results/Data/Final MCS Data/mcs_neural_dml.RData")
mse(mcs_neural_dml$Estimates)
