install.packages("furrr")
library(furrr)
library(magrittr)
list_data[[1]]
?DoubleMLPLR
plan(multisession, workers = 3)
seq_len(int_rep) %>%
future_map(~ {
# Create DML objects
dml_non_orth <- DoubleMLPLR(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
score = non_orth_score,
apply_cross_fitting = FALSE
)
dml_orth <- DoubleMLPLR(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
)
dml_orth_no_cf <- DoubleMLPLR(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 1,
apply_cross_fitting = FALSE
)
# Fit DML objects
dml_non_orth$fit()
dml_orth$fit()
dml_orth_no_cf$fit()
vec_theta <- c(
"non_orthogonal" = dml_non_orth$coef,
"orthogonal" = dml_orth$coef,
"orthogonal_no_cf" = dml_orth_no_cf$coef
)
return(vec_theta)
})
seq_len(int_rep) %>%
future_map(~ {
# Create DML objects
dml_non_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
score = non_orth_score,
apply_cross_fitting = FALSE
)
dml_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
)
dml_orth_no_cf <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 1,
apply_cross_fitting = FALSE
)
# Fit DML objects
dml_non_orth$fit()
dml_orth$fit()
dml_orth_no_cf$fit()
vec_theta <- c(
"non_orthogonal" = dml_non_orth$coef,
"orthogonal" = dml_orth$coef,
"orthogonal_no_cf" = dml_orth_no_cf$coef
)
return(vec_theta)
})
seq_len(int_rep) %>%
map(~ {
browser()
# Create DML objects
dml_non_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
score = non_orth_score,
apply_cross_fitting = FALSE
)
dml_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
)
dml_orth_no_cf <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 1,
apply_cross_fitting = FALSE
)
# Fit DML objects
dml_non_orth$fit()
dml_orth$fit()
dml_orth_no_cf$fit()
vec_theta <- c(
"non_orthogonal" = dml_non_orth$coef,
"orthogonal" = dml_orth$coef,
"orthogonal_no_cf" = dml_orth_no_cf$coef
)
return(vec_theta)
})
seq_len(int_rep) %>%
map(~ {
browser()
# Create DML objects
dml_non_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 2,
score = non_orth_score,
apply_cross_fitting = FALSE
)
dml_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
)
dml_orth_no_cf <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 1,
apply_cross_fitting = FALSE
)
# Fit DML objects
dml_non_orth$fit()
dml_orth$fit()
dml_orth_no_cf$fit()
vec_theta <- c(
"non_orthogonal" = dml_non_orth$coef,
"orthogonal" = dml_orth$coef,
"orthogonal_no_cf" = dml_orth_no_cf$coef
)
return(vec_theta)
})
seq_len(int_rep) %>%
map(~ {
# Create DML objects
dml_non_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 2,
score = non_orth_score,
apply_cross_fitting = FALSE
)
dml_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
)
dml_orth_no_cf <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 1,
apply_cross_fitting = FALSE
)
# Fit DML objects
dml_non_orth$fit()
dml_orth$fit()
dml_orth_no_cf$fit()
vec_theta <- c(
"non_orthogonal" = dml_non_orth$coef,
"orthogonal" = dml_orth$coef,
"orthogonal_no_cf" = dml_orth_no_cf$coef
)
return(vec_theta)
})
plan(multisession, workers = 3)
list_theta <- seq_len(int_rep) %>%
future_map(~ {
# Create DML objects
dml_non_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 2,
score = non_orth_score,
apply_cross_fitting = FALSE
)
dml_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
)
dml_orth_no_cf <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 1,
apply_cross_fitting = FALSE
)
# Fit DML objects
dml_non_orth$fit()
dml_orth$fit()
dml_orth_no_cf$fit()
vec_theta <- c(
"non_orthogonal" = dml_non_orth$coef,
"orthogonal" = dml_orth$coef,
"orthogonal_no_cf" = dml_orth_no_cf$coef
)
return(vec_theta)
})
df_theta <- list_data %>% map_dfr(~ .x)
colnames(df_theta) <- c("non_orth", "orth", "orth_no_cf")
df_theta <- df_theta %>%
pivot_longer(
cols = 1:3,
names_to = "Estimator",
values_to = "Theta hat"
)
?magrittr
plan()
list_theta <- seq_len(int_rep) %>%
future_map(~ {
# Create DML objects
dml_non_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 2,
score = non_orth_score,
apply_cross_fitting = FALSE
)
dml_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
)
dml_orth_no_cf <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 1,
apply_cross_fitting = FALSE
)
# Fit DML objects
dml_non_orth$fit()
dml_orth$fit()
dml_orth_no_cf$fit()
vec_theta <- c(
"non_orthogonal" = dml_non_orth$coef,
"orthogonal" = dml_orth$coef,
"orthogonal_no_cf" = dml_orth_no_cf$coef
)
return(vec_theta)
}, .progress = TRUE)
df_theta <- list_data %>% map_dfr(~ .x)
colnames(df_theta) <- c("non_orth", "orth", "orth_no_cf")
View(list_data)
list_theta <- seq_len(int_rep) %>%
map(~ {
brwoser()
# Create DML objects
dml_non_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 2,
score = non_orth_score,
apply_cross_fitting = FALSE
)
dml_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
)
dml_orth_no_cf <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 1,
apply_cross_fitting = FALSE
)
# Fit DML objects
dml_non_orth$fit()
dml_orth$fit()
dml_orth_no_cf$fit()
vec_theta <- c(
"non_orthogonal" = dml_non_orth$coef,
"orthogonal" = dml_orth$coef,
"orthogonal_no_cf" = dml_orth_no_cf$coef
)
return(vec_theta)
}, .progress = TRUE)
list_theta <- seq_len(int_rep) %>%
map(~ {
browser()
# Create DML objects
dml_non_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 2,
score = non_orth_score,
apply_cross_fitting = FALSE
)
dml_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
)
dml_orth_no_cf <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 1,
apply_cross_fitting = FALSE
)
# Fit DML objects
dml_non_orth$fit()
dml_orth$fit()
dml_orth_no_cf$fit()
vec_theta <- c(
"non_orthogonal" = dml_non_orth$coef,
"orthogonal" = dml_orth$coef,
"orthogonal_no_cf" = dml_orth_no_cf$coef
)
return(vec_theta)
}, .progress = TRUE)
dml_non_orth$coef
c(non_orthogonal = dml_non_orth$coef, orthogonal = dml_orth$coef,
orthogonal_no_cf = dml_orth_no_cf$coef)
vec_theta
q
list_theta <- seq_len(int_rep) %>%
future_map(~ {
# browser()
# Create DML objects
dml_non_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 2,
score = non_orth_score,
apply_cross_fitting = FALSE
)
dml_orth <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 5,
)
dml_orth_no_cf <- DoubleMLPLR$new(
data = list_data[[.x]],
ml_g = lrn_rf_g,
ml_m = lrn_rf_m,
n_folds = 1,
apply_cross_fitting = FALSE
)
# Fit DML objects
dml_non_orth$fit()
dml_orth$fit()
dml_orth_no_cf$fit()
vec_theta <- c(
"non_orthogonal" = dml_non_orth$coef,
"orthogonal" = dml_orth$coef,
"orthogonal_no_cf" = dml_orth_no_cf$coef
)
return(vec_theta)
}, .progress = TRUE)
list_theta[[1]]
list_theta[[2]]
list_theta[[3]]
df_theta <- list_data %>% map_dfr(~ .x)
df_theta <- list_data %>% do.call(what = rbind.data.frame)
df_theta <- do.call(what = rbind.data.frame, args = list_data)
df_theta
cbind(c(1, 2, 3), c(4, 5, 6))
df_theta <- do.call(what = rbind, args = list_data)
df_theta <- list_data %>%
map(as.data.frame) %>%
map_dfr(~ .x)
list_data %>%
map(as.data.frame)
list_theta[[1]]
class(list_theta[[1]])
is.vector(list_theta[[1]])
list_theta %>%
map(is.vector)
list_data %>%
map(as.data.frame)
as.data.frame(list_theta[[1]])
as.data.frame(list_theta[[2]])
as.data.frame(list_theta[[3]])
do.call(cbind, list_data)
do.call(cbind, list_theta)
df_theta <- list_data %>%
map_dfc(~ .x) %>%
t()
df_theta <- list_data %>%
map_dfc(~ .x)
df_theta <- do.call(cbind.data.frame, list_theta)
df_theta
df_theta <- do.call(cbind.data.frame, list_theta) %>%
t()
df_theta
df_theta <- do.call(cbind.data.frame, list_theta) %>%
t() %>%
set_rownames(NULL)
df_theta
df_theta <- do.call(cbind.data.frame, list_theta) %>%
t() %>%
set_rownames(seq_len(int_rep)) %>%
set_colnames(c("Non Orthogonal", "Orthogonal", "No Sample Splitting"))
df_theta
df_theta %>% head()
df_theta <- do.call(cbind.data.frame, list_theta) %>%
t() %>%
set_rownames(seq_len(int_rep)) %>%
set_colnames(c("Non Orthogonal", "Orthogonal", "No Sample Splitting")) %>%
pivot_longer(
cols = 1:3,
names_to = "Estimator",
values_to = "Theta hat"
)
df_theta <- do.call(cbind.data.frame, list_theta) %>%
t() %>%
set_rownames(seq_len(int_rep)) %>%
set_colnames(c("Non Orthogonal", "Orthogonal", "No Sample Splitting")) %>%
as.data.frame() %>%
pivot_longer(
cols = 1:3,
names_to = "Estimator",
values_to = "Theta hat"
)
df_theta
df_theta %>%
ggplot(aes(x = `Theta hat`, col = Estimator)) +
geom_histogram() +
geom_vline(xintercept = 0.75) +
xlab(label = "Estimate of Theta Hat") +
theme_bw()
df_theta %>%
ggplot(aes(x = `Theta hat`, fill = Estimator)) +
geom_histogram() +
geom_vline(xintercept = 0.75) +
xlab(label = "Estimate of Theta Hat") +
theme_bw()
df_theta %>%
ggplot(aes(x = `Theta hat`, fill = Estimator)) +
geom_histogram(alpha = 0.5) +
geom_vline(xintercept = 0.75) +
xlab(label = "Estimate of Theta Hat") +
theme_bw()
df_theta %>%
ggplot(aes(x = `Theta hat`, fill = Estimator)) +
geom_histogram(position = "identity", alpha = 0.5) +
geom_vline(xintercept = 0.75) +
xlab(label = "Estimate of Theta Hat") +
theme_bw()
df_theta %>%
ggplot(aes(x = `Theta hat`, fill = Estimator)) +
geom_histogram(position = "identity", alpha = 0.5) +
geom_vline(xintercept = 0.75) +
xlab(label = "Estimate of Theta Hat") +
ylab("Count") +
theme_bw()
# Replicate a simple PLR model
int_dim <- 50
int_n <- 500
int_rep <- 1000
dbl_alpha <- 0.05
list_data <- map(seq_len(int_rep), ~ {
make_plr_CCDDHNR2018(
n_obs = int_n,
dim_x = int_dim,
alpha = 0.75,
return_type = "DoubleMLData"
)
})
# Find a suitable learner
lrn_rf <- lrn(.key = "regr.ranger")
lrn_rf_m <- lrn_rf$clone()
lrn_rf_g <- lrn_rf$clone()
tnrs()
library(mlr3)
library(mlr3learners)
library(mlr3measures)
library(mlr3tuning)
library(tidyverse)
data("mtcars")
data("mtcars", package = "datasets")
library(datasets)
data("mtcars", package = "datasets")
datasets::mtcars
install.packages()
install.packages("datasets")
install.packages("datasets.load")
install.packages(c("DoubleML", "fansi", "renv", "tinytex"))
install.packages("codetools")
install.packages(c("boot", "class", "cluster"))
1+1
